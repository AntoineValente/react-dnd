{
    "componentChunkName": "component---src-templates-example-template-tsx",
    "path": "/examples/dustbin/stress-test",
    "result": {"data":{"currentPage":{"html":"<p>This example is similar to the previous one, but props of both the\ndrag sources and the drop targets change every second. It demonstrates\nthat React DnD keeps track of the changing props, and if a component\nreceives the new props, React DnD recalculates the drag and drop\nstate. It also shows how a custom <code class=\"language-text\">isDragging</code> implementation can make the drag source appear as dragged, even if the component that initiated the drag has received new props.</p>\n<view-source name=\"01-dustbin/stress-test\" component=\"dustbin-stress-test\">\n</view-source>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This example is similar to the previous one, but props of both the\ndrag sources and the drop targets change every second. It demonstrates\nthat React DnD keeps track of the changing props, and if a component\nreceives the new props, React DnD recalculates the drag and drop\nstate. It also shows how a custom "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"isDragging"}]},{"type":"text","value":" implementation can make the drag source appear as dragged, even if the component that initiated the drag has received new props."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"view-source","properties":{"name":"01-dustbin/stress-test","component":"dustbin-stress-test"},"children":[{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"path":"/examples/dustbin/stress-test","title":"Stress Test"}},"toc":{"edges":[]}},"pageContext":{}},
    "staticQueryHashes": []}