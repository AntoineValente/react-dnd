{
    "componentChunkName": "component---src-templates-example-template-tsx",
    "path": "/examples/drag-around/naive",
    "result": {"data":{"currentPage":{"html":"<!--alex disable clearly-->\n<p>This example naively relies on browser drag and drop implementation\nwithout much custom logic.</p>\n<p>When the box is dragged, we remove its original DOM node by returning\n<code class=\"language-text\">null</code> from <code class=\"language-text\">render()</code> and let browser draw the\ndrag preview. When the box is released, we draw it at the new coordinates.\nIf you try to drag the box outside the container, the browser will\nanimate its return.</p>\n<p>While this approach works for trivial cases, it flickers on drop. This\nhappens because the browser removes the drag preview before we have a\nchance to make the dragged item visible. This might not be a problem\nif you dim the original item instead of hiding it, but it's\nclearly visible otherwise.</p>\n<p>If we want to add custom logic such as snapping to grid or bounds\nchecking, we can only do this on drop. There is no way for us to\ncontrol what happens to dragged preview once the browser has drawn it.\nCheck out the <a href=\"/react-dnd/examples/drag-around/custom-drag-layer\">custom rendering example</a><br>\nif you'd rather trade more control for some more work.</p>\n<view-source name=\"02-drag-around/naive\" component=\"drag-around-naive\">\n</view-source>","htmlAst":{"type":"root","children":[{"type":"comment","value":"alex disable clearly"},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This example naively relies on browser drag and drop implementation\nwithout much custom logic."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When the box is dragged, we remove its original DOM node by returning\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" from "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"render()"}]},{"type":"text","value":" and let browser draw the\ndrag preview. When the box is released, we draw it at the new coordinates.\nIf you try to drag the box outside the container, the browser will\nanimate its return."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While this approach works for trivial cases, it flickers on drop. This\nhappens because the browser removes the drag preview before we have a\nchance to make the dragged item visible. This might not be a problem\nif you dim the original item instead of hiding it, but it's\nclearly visible otherwise."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we want to add custom logic such as snapping to grid or bounds\nchecking, we can only do this on drop. There is no way for us to\ncontrol what happens to dragged preview once the browser has drawn it.\nCheck out the "},{"type":"element","tagName":"a","properties":{"href":"/react-dnd/examples/drag-around/custom-drag-layer"},"children":[{"type":"text","value":"custom rendering example"}]},{"type":"element","tagName":"br","properties":{},"children":[]},{"type":"text","value":"\nif you'd rather trade more control for some more work."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"view-source","properties":{"name":"02-drag-around/naive","component":"drag-around-naive"},"children":[{"type":"text","value":"\n"}]}],"data":{"quirksMode":false}},"frontmatter":{"path":"/examples/drag-around/naive","title":"Naive"}},"toc":{"edges":[]}},"pageContext":{}},
    "staticQueryHashes": []}